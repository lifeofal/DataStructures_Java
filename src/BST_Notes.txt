
Binary Search Tree Notes:
Binary Search Tree: a Binary Tree that's left element is smaller than the parent node and the right element is larger than the parent node
Example:
                        2    <- root
                       / \
         left child-> 1   3 <- right child

Most Binary Search Trees dont contain duplicate eleents but there are some cases. All depends on user.
BST dont contain cycles (i.e. two nodes share a child node)

Inserting in a BST:
    BST elements must be comparable so that we can order them inside the tree.
    When we insert, we must compare the value to the value of the current node.

    - Recurse down the left subtree (< case)
    - Recurse down the right subtree (> case)
    - Handle finding a duplicate (= case)
    - Create a new node (found a null leaf)

Removing from BST:
    Can be seen as two-step process:
        1. Find the element we wish to remove
        2. Replace the node we want to remove with its successor (if any)_ to maintain the BST invariant.

        Remember: BST invariant is the left side holds smaller values, right holds larger values

    Find Phase:
        When searching a BST with a value, one of four things may happen:
            1. We hit a node with a null value. This means our BST does not contain the value we are looking for
            2. We find the value (= case)
            3. Value is greater than current node (> case)
            4. Value is less than current node (< case)

    Remove Phase:
        There are four cases when removing a value:
            1. Node to remove is a leaf (It contains no left or right subtree)
                When this happens, you can remove node without repercussion.
            2 & 3. Node to remove has a left or right subtree
                In this case, the parent of the target node become the parent of the target nodes subtree
                Example:
                                            5                   root.right = node.right.right
                                           /  \
                                          4    8
                                                 \
                                                 10
                                                /  \
                                               9    20

                If we want to remove 8, we direct its right subtree to now be the child of the node 5.
            4.Node to remove has two subtrees
                Here we can choose either one off the subtree to be the successor.
                    It can either be the smallest value of the right subtree or the largest value of the left subtree.


Tree Traversals:
    These three types of traversals are naturally defined recursively:
    Preorder: root left right
    Inorder: left root right // prints tree in order
    PostOrder: left right root

    Preorder(Node): prints before the recursive calls
        if node == null: return //breaks the recursion
        print(node.value)
        preorder(node.left)
        preorder(node.right)

    inorder(node): prints between the recursive calls
        if node == null: return
        inorder(node.left)
        print(node.value)
        inorder(node.right)

    postOrder(node): prints after the recursive calls
        if node == null: return
        postorder(node.left)
        postorder(node.right)
        print (node.value)




